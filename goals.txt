
Purpose:
To quickly create small, maintainable systems.

Faster development than rigid languages like java.
More explicit and easy-to-maintain typing than python.
Cleaner and more consistent syntax than c++.
More integrated data structures than c.

Use-Cases:
-> Single-user interactive programs.
-> Data visualizations.
-> Command-driven event loops.
-> Terminal user interfaces.

Anti-Cases:
-> Advanced graphics processing as in c++.
-> Big data processing as in python.
-> Highly parallel applications as in go.
-> OS-related scripting as in bash or perl.
-> Hardcore security like rust.
-> Extreme low-level speed like c.
-> Inheritance-based polymorphism as in java or c#.
-> Complex GUI programming.

Features:
-> Highly composable types using subtype polymorphism instead of inheritance.
-> Syntax well suited to interactive development.
-> Probably a nice REPL.
-> Explicit syntax with marking for mutability and side-effects.
-> Included suite of fundamental data structures like trees, maps, and fsm.
-> Probably full unicode support.
-> Integrated development tools like unit testing, debugging, and documentation.
-> Syntax as consistent and simple as possible.
-> Manual memory management without being annoying if that's possible.
-> Closely-tied toolset that doesn't impose too many structural restrictions.
-> Quick to getting starting making interactive programs.

Acceptance Cases:
-> It is fast and easy to create a basic interactive program.
-> The syntax is consistent and easy to understand.
-> Programs are structured in a natural way.
