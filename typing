
###
Concept:
-> Datatypes are fundamental pieces, like int.
-> Structs are groups of either datatypes or more
structs.
-> Both store data. Both are considered types.
-> Functions can only return types.
-> Functions can accept either types or
interfaces. Actually that doesn't make sense
because values can't have functions associated
with them.
###

datatype Int { 1, 2, 3, ... }
datatype Bool { true, false }
datatype String { ... }

struct Sequence { *items }

??? List {
    Sequence;
    fun ...;
    fun ...;
    fun ...;
}

fun typed_function(Int i, Bool b, Sequence s): Sequence {
}

fun iterate([T]Sequence s) : [T]Generator {
    yield item for item in s;
}

###
So just like everything in python is an object,
everything in malt is a data structure.
###

# Ok so what about grouping together like
# functions, notably functions that all work
# together on the same structure? This is like
# traditional object oriented programming; is that
# a bad thing?
