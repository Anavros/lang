
###
###

Display = Abstract {
    # Superclass must implement all functions.
    repr = Fun();
}

Displayer = Type {
    implement Display {
        repr = Fun() {};
    }
}

Switch = Type {
    # Requires no implementation.
    switch:Bool;
}

Super = Type {
    include Display, Switch;  # Error
}

Super = Switch + Display;  # Error

Super = Type {
    include Switch;
    implement Display {
        repr = Fun() { }
    }
}

f = Fun(x:Display+Switch) { }

# What about construction functions?
Super = Type[N](length:Num) {
    if N == Int {
        include Switch;
    };
    implement Display {
        repr = Fun() {
            return Str(length);
        };
    };
};

s = Super[Real](5);
s.switch;  # fails, not known at compile time

# Misc note on syntax.
var : Type
var = Type(value)
Subset <: Superset
Superset >: Subset
