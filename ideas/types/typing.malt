
###
Data structures and functions are broken up into two separate entities. Structs,
instead of being considered one type, are considered as a collection of
disparate types. Function parameters are defined as unions of needed field sets.
###

Location = (x:y:Float);
Health = (hp:Num);
Sprite = (image:Image, scale=1.0, rotation=0.0);
Weapon = (type:String, damage:speed:Num);

# An object is a concatenation of data structures.
player = Location(0, 0)
    :: Health(100)
    :: Sprite("player.png")
    :: Weapon("blaster", 2, 5);

powerup = Location(0.4, 0.2)
    :: Sprite("comegetme.png", scale=0.5);

ether = Health(1000);

avatar = Sprite("me.png", rotation=0.25);

# Can something have a sprite but no location?
# You could make a requirement that sprites must have locations.
# But that isn't always the case.
# Just make it so that drawing functions require Sprite+Location.
# Then locations and sprites are still separate, even when used together.

# Functions only specify the pieces that they need to function.
# For instance, move() will accept anything with a location component.
move = (item:Location, dx:dy:Float) {
    item.x, item.y += dx, dy;  # piecewise operations in tuples?
};

render = (item:Location+Sprite) {
    game.render(item.image, (item.x, item.y));
};

# Partial application of functions.
affect_health = (item:Health, amount:Num, subtract:Bool);
heal = affect_health(?, ?, subtract=false);
harm = affect_health(?, ?, subtract=true);

# Therefore:
move(player)    # works
move(ether)     # doesn't work
render(powerup) # works
render(avatar)  # doesn't work

###
No field conflicts are allowed! Only one variable may have a given name in a
structure union. This may cause problems when combining lots of things from
different libraries and might need a workaround. No dynamic dispatch or
overloading though.
###

# Objects can be constructed directly using a union of sets, or types can be
# constructed and objects created from that.

me = Location() :: Health();
Player = Location :: Health;
me = Player();

# Not sure how constructors would change in that case.

###
Everything gets much more complicated when we start to deal with nested types,
like sequences.
###

objects = Array[Location::Health](
    Location(0, 0) :: Health(100),
    Location(1, 1) :: Health(200) :: Weapon("blaster.png", 2, 5),
);

f = (object:Location+Health) : Num {
    return object.x * object.hp;
};

map(f, objects);

# What about a shortcut if you're targeting a specific function:
objects = Array[param(f)]();
applytomatches(f, objects);

###
Is there anything wrong with that?
A type T[A+B+C] can only contain objects that have *at least* A+B+C; objects
may have more as well!
Just do parameterized types!
###

Constraint = (T:Type);
Memory = Constraint :: Address;
Array = Memory :: (length:size:Num);

# Maybe we could have heterogenous container types that contain both data and
# functions.
# Modules are already like that.
Link = [
    lists.linkedlist,
    lists.iterate,
    lists.insert,
    lists.remove,
];
l = Link();
l.iterate();
l.remove();

# Maybe we can bring back functions in group types.
Health = (
    hp : Num,
    affect = (amount:Num, negate=false) {
        hp = sum(hp, if negate -amount else amount, min=0);
    },
    heal = affect(?, negate=false),
    harm = affect(?, negate=true),
);
h = Health(100);
h.heal(5);
h.hp = 50;

player = Health(100) :: Location(0, 0) :: (name:String);
player.x = 10;
player.heal(100);
print(player.name);

Array[T] = (
    mem:Pointer[T],
    length:size:Num,
    at = (index:Num) : T? {
    },
);

# But then you don't have to define every single member at once.
Sequence[T] = (
    length : Num,
    iterate : () => Gen[T],
);

Array[T] = Sequence[T](?, array.iterate) :: ...;
items = Sequence[Num](10, iterate=array.iterate);
# How would you guarantee an input function like that would have everything it
# needs?

# And then you can write a function for the interface.
printall = (elements:Sequence) {
    print(e) for e in elements;
};
apply(print, elements);

# Therefore sequence is sort of an abstract type.
