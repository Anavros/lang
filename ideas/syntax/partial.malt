
###
Partial applications of functions.
###

# A normal function definition.
affect = (hp:Health, amount:Num, take:Bool);

# A normal function call.
affect(hp, 5, take=false);

# New function definitions using partial application.
heal = affect(?, ?, take=false);
hurt = affect(?, ?, take=true);

# A call to the new function.
heal(hp, 5);

###
Two problems, both with clarity: the creation of a partial function looks just
like a normal call; and the order of arguments can potentially become confusing.
###

affect(hp, 5, false);  # a call
affect(hp, ?, false);  # a new function

# Possible solution is to make partial function creation into a builtin
# function.
heal = partial(affect, take=false);
hurt = partial(affect, take=true);
# That looks good, is pretty clear, and is consistent with other stuff.
# Especially if you consider that all parameters can be set by keyword.

###
Match Statements
###
###
Partial functions also have a nice use in matching statements, but it's not sure
how that syntax will work.
###

# Pipelines as in elixir.
[1, 2, 3, 4, 5] |> map(add.bind(?, 3)) |> filter(divisible.bind(?, 2)) |> print();
