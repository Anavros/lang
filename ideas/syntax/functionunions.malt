
###
Callback functions typically all need to accept the same arguments, even if some
of the arguments will not be used.

Find a way to mix and match callback functions that only take what they need.

Also, we need some partial application built in for different reasons.
###

a = (n:Num) { };
b = (s:Str) { };
c = (n:Num, s:Str) { };

# It probably has something to do with block scopes I think.

# Structural way to do it. Gets out of hand quickly.
dispatch(name:Str) {
    match name {
        "a" { a(Num()); };
        "b" { b(Str()); };
        "c" { c(Num(), Str()); };
    }
};

# Doesn't work because the functions would be called on creation.
mapping = Map(
    "a" = a(Num()),
    "b" = b(Str()),
    "c" = c(Num(), Str()),
);
mapping.at(char)();

# Doesn't work because a and b have different signatures.
mapping = Map(
    "a" = a,
    "b" = b,
    "c" = c,
);
mapping.at(char)(Num(), Str());

###
We already have an idea of partial application; what about over-application?
It seems reasonable, although it might mess up in the corner cases.
###

# Functions only take the given arguments if they're needed.
# Of course syntax is liable to change. Not even partial applications have a
# good form yet.
mapping.at(char)(?Num(), ?Str());

###
It's like the opposite of currying. The caller doesn't know how many arguments
are needed, but the callee will always get exactly what it needs. The real
trouble is how to make it clear what's happening.

Maybe we can have function unions, where one function is picked from a group
and called. Each time the group is called, you pass in enough arguments to cover
everything.
###

# All functions take a first argument n:Num.
# bar() and baz() both take an argument s, but with different types.
# All three have different arity.
foo = (n:Num) {};
bar = (n:Num, s:Str) {};
baz = (n:Num, s:Sequence, d:Data) {};

union = (name:Str, n:Num, s:???, d:Data) {
    match name {
        "foo" { foo(n); };
        "bar" { bar(n, s); };
        "baz" { baz(n, s, d); };
    };
};
# Vs
union = foo::bar::baz;
union(n, s, d);
foo::bar::baz(n, s, d);

# Maybe just give a conflict if two functions have the same arguments?
# Like combining types.

# Note that there is no discriminant; we can't tell which function to target.
# Maybe this is better.
union.foo(n, s, d);

# Could we expand this further to create function tuples similar to the group
# types we have already?
