
###
Short, one-expression functions, used where compactness is desired.

Lambdas can not contain statements, and must evaluate to one expression.
###

# Normal functions can be used as expressions.
map((Number x) { return x*2; }, numbers);

# What if we just extended normal blocks to allow one-expression blocks too.
map((Number x) { x*2 }, numbers);

# But lambdas are shorter.
# They omit the braces, return statement, semicolon, and type.
map(x=>x*2, numbers);
map((x){x*2}, numbers);

# There can be any number of arguments.
map((x, y) => x*y, numbers);

# Can arguments be typed?
# Or is typechecking skipped?
map(Number x => x*2, numbers);

# There can only be one expression as a result.
map(x => (y=x*2; y+4), numbers); # not allowed

# Assigning a lambda to a name.
f = (Number x) => x*2;
f = (Number x) { x*2 };

###
What about an alternative approach?
###

f = lambda(x, x^2);
f = lambda('x', 'x'^2);
f = lambda(x => x^2);

f = lam x = x^2
f = lam(x, x^2)

a = Array[Numbers](1, 2, 3);
map({Number n => n^2}, a);

###
Can lambdas not evaluate to an expression?
###

# This doesn't make sense, really.
map(x=>print(x), items);
# Use apply for this.
apply(print, items);
