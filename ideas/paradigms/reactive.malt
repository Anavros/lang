
###
Reactive programming involves values that change over time, as contrasted to
values that are changed discretely in steps. It could be very appropriate for
interactive programming.

The real trouble with this style is that it tends to obfuscate what's actually
going on internally. So the ideal implementation would involve a limited,
imperative-friendly reaction model that is transparent and easy to understand.
###

###
Consider this: programming breaks down to the what (data), the how (functions),
and the when (threads). Make the when as big of a point as the what and the how.
###

on program.start {
    print("Hello, world!");
};

on module.load {
    new CONFIG = 100;
};

# Signals could be built-in or just a prominent library.
import Signal, Window;

ui = Signal.new();
on Window.event(e) when e.name == "click" {
    ui.mouse_click(e.x, e.y);;
};

on ui.mouse_click(x: Float, y: Float) {
    print("(|x|, |y|)");
};
# Vs.
window.on_click(function(event) {
    print("(|event.x|, |event.y|)");
});




# Consider a use-case in graphics programming.
# Draw a rectangle around the mouse cursor that follows it wherever it goes.

# In an imperative style.
# Draws every frame but is simple to implement.
loop {
    def rect = (x-d, y-d, x+d, y+d);
    draw(rect);
    sleep(framerate);
};

# In a reactive style.
# Only redraws when the mouse moves but requires more overhead.
when changed(x, y, d) {
    def rect = (x-d, y-d, x+d, y+d);
    draw(rect);
};

# In a publish-subscribe style.
on guichannel.mouse_movement (x, y) {
    def rect = (x-d, y-d, x+d, y+d);
    draw(rect);
};

# Maybe a reactive style could work with the already-extant system.
def rect() { (x-d, y-d, x+d, y+d) };
loop {
    draw(rect());
    sleep(framerate);
};
