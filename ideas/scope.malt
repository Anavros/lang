

# For global variables, there are two options I
# think. Either mark a function as having a global
# scope, allowing it to have access to global
# variables, or cherry-pick which variables to
# access using a keyword.

global counter = 0;

global fun increment() {
    counter += 1;
    # What happens if you declare variables in
    # here? Are they local or global?
}
# Function mark is more explicit, but might
# include too many globals? What if you don't want
# all of them? Is that a real problem?
# Might mesh well with public function
# declarations?

fun increment() {
    global counter += 1;
}
# Allows choosing variables explicitely. Not as
# clear that the function as a whole is accessing
# global variables.

# Maybe a hybrid option could involve setting a
# block's scope to global.

fun increment() @global{
    counter += 1;
}

fun increment() {
    # Local scope.
    @global{
        # Global scope.
        counter += 1;
    }
}

###
Well, you usually don't want to include every single global variable, only a
set few.
###
