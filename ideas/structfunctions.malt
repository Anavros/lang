
###
Concept:
-> Some functions are closely tied with
structures, such that it would make sense for them
to be associated.
-> There could be a special type of function that
specifically operates on one kind of struct.
-> Which is essentially normal object orientation.
###

# Should there be a special class of functions
# that only modify a single item? Is that common
# enough?

mod push5(List l) {  # modification function
    l.push(5);
}

m = l.push5();
l.push5()!;

# They are very tied with structs, pretty much in
# the same way normal objects are. And some things
# are just going to be like that I think.

struct Contact {
    String name, password, address;
}

fun change_name(Contact c, String name) => Contact {
    c.name = name;
    return c;
}

mod change_name(String name) for Contact {
    self.name = name;
}

# It doesn't actually make that big of a
# difference. And it would make things more
# complicated under the hood.

# So probably no then.

# What about having functions associated with a
# structure like this?

struct Contact(String name, password, address) {
    fun update(Contact c; String pass) : Contact {
        c.password = pass;
    }
}

# What about setters and getters? I never liked
# that pattern.

# Could there be a way to allow public access to
# struct variables but have restrictions on
# allowed values?

datatype Int [min=?, max=?] {
}

struct Point(Int[min=0, max=10] x, y, z) { }

p = Point(1, 2, 15);  # fails?
p.x = -1; # fails?

# Maybe in the function implementation you can
# have hidden gets and sets as in python's
# property decorator?

struct Point(Int x, y, z) {
    fun __getmember__(Point p, Member m) {
        return p[m] * 2;
    }
    # Specific getter overwrites general case?
    getter x {
        return z;
    }
}

p = Point(1, 2, 3);
p.x == p.z;

# How does the syntax look for more complicated
# examples?
struct ComplicatedStruct(
    String[charset="[0-9]"] a, b, c;
    Int[min=0] x, y;
) {
    getter a, b, c {
        return "0";
    }
}
# Not very good.
# Still need a consistent way to represent
# different kinds of braces, semicolon rules, and
# relationships between blocks.

struct {
    Name: ComplicatedStruct
    Args: {
    }
    Func: {
    }
}
