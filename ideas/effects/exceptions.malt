
###
There are two fundamental kinds of errors: recoverable exceptions and
programming mistakes. Programming mistakes by definition can not be recovered
and must halt the program immediately, while everyday exceptions should always
be handled in code.

I like the freedom of Go's error return values, but don't like the ease of
ignoring exceptions. If we disallow programs with programmer errors to continue,
then all other errors should be fixable and considered in the design process.
###

# Input is a function that may fail.
input = {
    if stdin {
        return stdin.readline();
    } else {
        return failure;
    };
};

try x = input() err x = "default";



# The solution: result types.
Result[T] = Success[T] | Failure
let input = returns Result[String] {
    if stdin {
        return Success[String](stdin.readline());
    } else {
        return Failure;
    };
};
x = match input() {
    Success(s) { s };
    Failure { "default" };
};

# 'function returns Result[T]' sugars to 'function?'.
let input? = returns String? {
};

# 'match ...' sugars to 'call err default'.
x = input() err "default";
