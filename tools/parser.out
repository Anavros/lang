Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> program statement
Rule 2     program -> statement
Rule 3     statement -> function_call SEMICOLON
Rule 4     statement -> assignment SEMICOLON
Rule 5     statement -> function_def SEMICOLON
Rule 6     function_call -> NAME LPAREN argument_list RPAREN
Rule 7     argument -> value
Rule 8     argument_list -> argument_list COMMA argument
Rule 9     argument_list -> argument
Rule 10    function_def -> NAME NAME LPAREN RPAREN
Rule 11    function_def -> NAME NAME LPAREN RPAREN NAME NAME
Rule 12    function_def -> NAME NAME LPAREN parameter_list RPAREN
Rule 13    function_def -> NAME NAME LPAREN parameter_list RPAREN NAME NAME
Rule 14    parameter -> NAME NAME
Rule 15    parameter_list -> parameter_list COMMA parameter
Rule 16    parameter_list -> parameter
Rule 17    assignment -> variable ASSIGN value
Rule 18    value -> variable
Rule 19    value -> constant
Rule 20    variable -> NAME
Rule 21    constant -> STRING
Rule 22    constant -> NUMERAL

Terminals, with rules where they appear

ASSIGN               : 17
COMMA                : 8 15
LPAREN               : 6 10 11 12 13
NAME                 : 6 10 10 11 11 11 11 12 12 13 13 13 13 14 14 20
NUMERAL              : 22
RPAREN               : 6 10 11 12 13
SEMICOLON            : 3 4 5
STRING               : 21
error                : 

Nonterminals, with rules where they appear

argument             : 8 9
argument_list        : 6 8
assignment           : 4
constant             : 19
function_call        : 3
function_def         : 5
parameter            : 15 16
parameter_list       : 12 13 15
program              : 1 0
statement            : 1 2
value                : 7 17
variable             : 17 18

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . program statement
    (2) program -> . statement
    (3) statement -> . function_call SEMICOLON
    (4) statement -> . assignment SEMICOLON
    (5) statement -> . function_def SEMICOLON
    (6) function_call -> . NAME LPAREN argument_list RPAREN
    (17) assignment -> . variable ASSIGN value
    (10) function_def -> . NAME NAME LPAREN RPAREN
    (11) function_def -> . NAME NAME LPAREN RPAREN NAME NAME
    (12) function_def -> . NAME NAME LPAREN parameter_list RPAREN
    (13) function_def -> . NAME NAME LPAREN parameter_list RPAREN NAME NAME
    (20) variable -> . NAME

    NAME            shift and go to state 4

    function_def                   shift and go to state 5
    assignment                     shift and go to state 6
    statement                      shift and go to state 1
    program                        shift and go to state 2
    function_call                  shift and go to state 3
    variable                       shift and go to state 7

state 1

    (2) program -> statement .

    NAME            reduce using rule 2 (program -> statement .)
    $end            reduce using rule 2 (program -> statement .)


state 2

    (0) S' -> program .
    (1) program -> program . statement
    (3) statement -> . function_call SEMICOLON
    (4) statement -> . assignment SEMICOLON
    (5) statement -> . function_def SEMICOLON
    (6) function_call -> . NAME LPAREN argument_list RPAREN
    (17) assignment -> . variable ASSIGN value
    (10) function_def -> . NAME NAME LPAREN RPAREN
    (11) function_def -> . NAME NAME LPAREN RPAREN NAME NAME
    (12) function_def -> . NAME NAME LPAREN parameter_list RPAREN
    (13) function_def -> . NAME NAME LPAREN parameter_list RPAREN NAME NAME
    (20) variable -> . NAME

    NAME            shift and go to state 4

    function_def                   shift and go to state 5
    assignment                     shift and go to state 6
    statement                      shift and go to state 8
    function_call                  shift and go to state 3
    variable                       shift and go to state 7

state 3

    (3) statement -> function_call . SEMICOLON

    SEMICOLON       shift and go to state 9


state 4

    (6) function_call -> NAME . LPAREN argument_list RPAREN
    (10) function_def -> NAME . NAME LPAREN RPAREN
    (11) function_def -> NAME . NAME LPAREN RPAREN NAME NAME
    (12) function_def -> NAME . NAME LPAREN parameter_list RPAREN
    (13) function_def -> NAME . NAME LPAREN parameter_list RPAREN NAME NAME
    (20) variable -> NAME .

    LPAREN          shift and go to state 10
    NAME            shift and go to state 11
    ASSIGN          reduce using rule 20 (variable -> NAME .)


state 5

    (5) statement -> function_def . SEMICOLON

    SEMICOLON       shift and go to state 12


state 6

    (4) statement -> assignment . SEMICOLON

    SEMICOLON       shift and go to state 13


state 7

    (17) assignment -> variable . ASSIGN value

    ASSIGN          shift and go to state 14


state 8

    (1) program -> program statement .

    NAME            reduce using rule 1 (program -> program statement .)
    $end            reduce using rule 1 (program -> program statement .)


state 9

    (3) statement -> function_call SEMICOLON .

    NAME            reduce using rule 3 (statement -> function_call SEMICOLON .)
    $end            reduce using rule 3 (statement -> function_call SEMICOLON .)


state 10

    (6) function_call -> NAME LPAREN . argument_list RPAREN
    (8) argument_list -> . argument_list COMMA argument
    (9) argument_list -> . argument
    (7) argument -> . value
    (18) value -> . variable
    (19) value -> . constant
    (20) variable -> . NAME
    (21) constant -> . STRING
    (22) constant -> . NUMERAL

    NAME            shift and go to state 22
    STRING          shift and go to state 20
    NUMERAL         shift and go to state 16

    constant                       shift and go to state 15
    argument                       shift and go to state 18
    value                          shift and go to state 19
    argument_list                  shift and go to state 17
    variable                       shift and go to state 21

state 11

    (10) function_def -> NAME NAME . LPAREN RPAREN
    (11) function_def -> NAME NAME . LPAREN RPAREN NAME NAME
    (12) function_def -> NAME NAME . LPAREN parameter_list RPAREN
    (13) function_def -> NAME NAME . LPAREN parameter_list RPAREN NAME NAME

    LPAREN          shift and go to state 23


state 12

    (5) statement -> function_def SEMICOLON .

    NAME            reduce using rule 5 (statement -> function_def SEMICOLON .)
    $end            reduce using rule 5 (statement -> function_def SEMICOLON .)


state 13

    (4) statement -> assignment SEMICOLON .

    NAME            reduce using rule 4 (statement -> assignment SEMICOLON .)
    $end            reduce using rule 4 (statement -> assignment SEMICOLON .)


state 14

    (17) assignment -> variable ASSIGN . value
    (18) value -> . variable
    (19) value -> . constant
    (20) variable -> . NAME
    (21) constant -> . STRING
    (22) constant -> . NUMERAL

    NAME            shift and go to state 22
    STRING          shift and go to state 20
    NUMERAL         shift and go to state 16

    constant                       shift and go to state 15
    value                          shift and go to state 24
    variable                       shift and go to state 21

state 15

    (19) value -> constant .

    RPAREN          reduce using rule 19 (value -> constant .)
    COMMA           reduce using rule 19 (value -> constant .)
    SEMICOLON       reduce using rule 19 (value -> constant .)


state 16

    (22) constant -> NUMERAL .

    RPAREN          reduce using rule 22 (constant -> NUMERAL .)
    COMMA           reduce using rule 22 (constant -> NUMERAL .)
    SEMICOLON       reduce using rule 22 (constant -> NUMERAL .)


state 17

    (6) function_call -> NAME LPAREN argument_list . RPAREN
    (8) argument_list -> argument_list . COMMA argument

    RPAREN          shift and go to state 25
    COMMA           shift and go to state 26


state 18

    (9) argument_list -> argument .

    RPAREN          reduce using rule 9 (argument_list -> argument .)
    COMMA           reduce using rule 9 (argument_list -> argument .)


state 19

    (7) argument -> value .

    RPAREN          reduce using rule 7 (argument -> value .)
    COMMA           reduce using rule 7 (argument -> value .)


state 20

    (21) constant -> STRING .

    RPAREN          reduce using rule 21 (constant -> STRING .)
    COMMA           reduce using rule 21 (constant -> STRING .)
    SEMICOLON       reduce using rule 21 (constant -> STRING .)


state 21

    (18) value -> variable .

    RPAREN          reduce using rule 18 (value -> variable .)
    COMMA           reduce using rule 18 (value -> variable .)
    SEMICOLON       reduce using rule 18 (value -> variable .)


state 22

    (20) variable -> NAME .

    RPAREN          reduce using rule 20 (variable -> NAME .)
    COMMA           reduce using rule 20 (variable -> NAME .)
    SEMICOLON       reduce using rule 20 (variable -> NAME .)


state 23

    (10) function_def -> NAME NAME LPAREN . RPAREN
    (11) function_def -> NAME NAME LPAREN . RPAREN NAME NAME
    (12) function_def -> NAME NAME LPAREN . parameter_list RPAREN
    (13) function_def -> NAME NAME LPAREN . parameter_list RPAREN NAME NAME
    (15) parameter_list -> . parameter_list COMMA parameter
    (16) parameter_list -> . parameter
    (14) parameter -> . NAME NAME

    RPAREN          shift and go to state 28
    NAME            shift and go to state 30

    parameter                      shift and go to state 29
    parameter_list                 shift and go to state 27

state 24

    (17) assignment -> variable ASSIGN value .

    SEMICOLON       reduce using rule 17 (assignment -> variable ASSIGN value .)


state 25

    (6) function_call -> NAME LPAREN argument_list RPAREN .

    SEMICOLON       reduce using rule 6 (function_call -> NAME LPAREN argument_list RPAREN .)


state 26

    (8) argument_list -> argument_list COMMA . argument
    (7) argument -> . value
    (18) value -> . variable
    (19) value -> . constant
    (20) variable -> . NAME
    (21) constant -> . STRING
    (22) constant -> . NUMERAL

    NAME            shift and go to state 22
    STRING          shift and go to state 20
    NUMERAL         shift and go to state 16

    constant                       shift and go to state 15
    argument                       shift and go to state 31
    value                          shift and go to state 19
    variable                       shift and go to state 21

state 27

    (12) function_def -> NAME NAME LPAREN parameter_list . RPAREN
    (13) function_def -> NAME NAME LPAREN parameter_list . RPAREN NAME NAME
    (15) parameter_list -> parameter_list . COMMA parameter

    RPAREN          shift and go to state 32
    COMMA           shift and go to state 33


state 28

    (10) function_def -> NAME NAME LPAREN RPAREN .
    (11) function_def -> NAME NAME LPAREN RPAREN . NAME NAME

    SEMICOLON       reduce using rule 10 (function_def -> NAME NAME LPAREN RPAREN .)
    NAME            shift and go to state 34


state 29

    (16) parameter_list -> parameter .

    RPAREN          reduce using rule 16 (parameter_list -> parameter .)
    COMMA           reduce using rule 16 (parameter_list -> parameter .)


state 30

    (14) parameter -> NAME . NAME

    NAME            shift and go to state 35


state 31

    (8) argument_list -> argument_list COMMA argument .

    RPAREN          reduce using rule 8 (argument_list -> argument_list COMMA argument .)
    COMMA           reduce using rule 8 (argument_list -> argument_list COMMA argument .)


state 32

    (12) function_def -> NAME NAME LPAREN parameter_list RPAREN .
    (13) function_def -> NAME NAME LPAREN parameter_list RPAREN . NAME NAME

    SEMICOLON       reduce using rule 12 (function_def -> NAME NAME LPAREN parameter_list RPAREN .)
    NAME            shift and go to state 36


state 33

    (15) parameter_list -> parameter_list COMMA . parameter
    (14) parameter -> . NAME NAME

    NAME            shift and go to state 30

    parameter                      shift and go to state 37

state 34

    (11) function_def -> NAME NAME LPAREN RPAREN NAME . NAME

    NAME            shift and go to state 38


state 35

    (14) parameter -> NAME NAME .

    RPAREN          reduce using rule 14 (parameter -> NAME NAME .)
    COMMA           reduce using rule 14 (parameter -> NAME NAME .)


state 36

    (13) function_def -> NAME NAME LPAREN parameter_list RPAREN NAME . NAME

    NAME            shift and go to state 39


state 37

    (15) parameter_list -> parameter_list COMMA parameter .

    RPAREN          reduce using rule 15 (parameter_list -> parameter_list COMMA parameter .)
    COMMA           reduce using rule 15 (parameter_list -> parameter_list COMMA parameter .)


state 38

    (11) function_def -> NAME NAME LPAREN RPAREN NAME NAME .

    SEMICOLON       reduce using rule 11 (function_def -> NAME NAME LPAREN RPAREN NAME NAME .)


state 39

    (13) function_def -> NAME NAME LPAREN parameter_list RPAREN NAME NAME .

    SEMICOLON       reduce using rule 13 (function_def -> NAME NAME LPAREN parameter_list RPAREN NAME NAME .)

