
###
Write a set of higher-order functions that work on any type.

Tests generics, interfaces, and function parameters.
###



###
Apply a function to each element in a sequence, creating a new sequence.

Limits of the function are imposed upon the elements of the input and output
sequences.
###
def map(Function[A=>B] f, Sequence[A] old) returns Sequence[B] {
    def new = Sequence(old.length);
    for i in old.bounds {
        new.{i} = f(old.{i});
    };
};

assert map((b){not b}, Array(true, true, true)) == Array(false, false, false);



###
Check if an item is included within a given sequence. Must work with any type.

Performs a naive linear search. What about sorted lists, where a binary search
would do? Do different types get to define different inclusion methods?
###

def included(T element, Iterable[T] list) returns Bool {
    for x in list.iterate() {  # methods?
        if element == x  {
            return true;
        };
    };
    return false;
};


###
Compute the sum of a sequence by calling the add function on each element. By
definition, each element must be addable. In addition, the type must have some
default value to use as a starting point. Recall python's sum function, which
doesn't work on strings because the starting point is 0, not "".

Sums are special cases of folds. Note that the identity of addition is 0, while
the identity of multiplication is 1.
###

def reduce(Function[A, A] f, Sequence[A] items, A identity) returns A {
    def reduction = identity;
    for i in items.iterate() {
        mut reduction = f(reduction, i);
    };
    return reduction;
};


def sum = partial(reduce, add, identity=0);



sum = (s:Sequence[Add]) {
    total = [Add].identity;
    for e in s {
        total += e;  # must support adding
    };
};

reduce = (f:Function[A,A=>A], items:Sequence[A], identity:A) : A {
    reduction = identity;
    for i in items {
        f(reduction, i);
    };
};
