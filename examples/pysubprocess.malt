
# Python

def call(args, *, stdin=None, stdout=None, stderr=None, shell=False, timeout=None):
    ...

# Try Two

def call(String args*, File stdin? stdout? stderr?, Boolean shell=false, Number timeout?) { };

def call(
    String args*,
    File stdin? stdout? stderr?,
    Boolean shell=false,
    Number timeout?
) {
};

# Old

call = Func (args:Sequence[String], *,
stdin:File, stdout:File, stderr:File, shell=false, timeout:Int) {
    ...
}

###
Notes
-> Type specification is pretty long-winded sometimes.
-> There's some ambiguity about passing null types. Are they kwargs? Can they
be provided positionally?
-> I think every argument should be accessible by keyword.
-> There can be a methodology for passing args by position still, but keywords
should always be available.
-> That should make partial application easier to deal with.
###

call = Func
(args:Sequence[String], stdin:stdout:stderr:File?, shell=false, timeout:Num?) {
    ...
    if given(stdin) ...  # 'File?' can be Some[File] or None.
}

File? = Option[File]
File! = Result[File]  # ?

###
So we do have a 'None' type, but it has to be allowed explicitely. Therefore,
we avoid the unexpected null problem.
###
