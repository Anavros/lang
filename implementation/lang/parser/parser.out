Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    COLON

Grammar

Rule 0     S' -> program
Rule 1     program -> program statement
Rule 2     program -> return SEMICOLON
Rule 3     statement -> call SEMICOLON
Rule 4     statement -> definition SEMICOLON
Rule 5     return -> RETURN value
Rule 6     definition -> DEFINE NAME value
Rule 7     definition -> DEFINE NAME tuple block
Rule 8     call -> NAME tuple
Rule 9     tuple -> LPAREN arguments RPAREN
Rule 10    tuple -> LPAREN RPAREN
Rule 11    arguments -> arg
Rule 12    arguments -> arguments COMMA arg
Rule 13    arg -> positional_value
Rule 14    arg -> named_value
Rule 15    arg -> variable
Rule 16    named_value -> NAME ASSIGN value
Rule 17    positional_value -> value
Rule 18    value -> constant
Rule 19    value -> block
Rule 20    value -> call
Rule 21    value -> tuple
Rule 22    variable -> NAME
Rule 23    constant -> STRING
Rule 24    constant -> NUMERAL
Rule 25    block -> LBRACE program RBRACE

Terminals, with rules where they appear

ASSIGN               : 16
COLON                : 
COMMA                : 12
DEFINE               : 6 7
LBRACE               : 25
LPAREN               : 9 10
NAME                 : 6 7 8 16 22
NUMERAL              : 24
RBRACE               : 25
RETURN               : 5
RPAREN               : 9 10
SEMICOLON            : 2 3 4
STRING               : 23
error                : 

Nonterminals, with rules where they appear

arg                  : 11 12
arguments            : 9 12
block                : 7 19
call                 : 3 20
constant             : 18
definition           : 4
named_value          : 14
positional_value     : 13
program              : 1 25 0
return               : 2
statement            : 1
tuple                : 7 8 21
value                : 5 6 16 17
variable             : 15

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . program statement
    (2) program -> . return SEMICOLON
    (5) return -> . RETURN value

    RETURN          shift and go to state 3

    program                        shift and go to state 2
    return                         shift and go to state 1

state 1

    (2) program -> return . SEMICOLON

    SEMICOLON       shift and go to state 4


state 2

    (0) S' -> program .
    (1) program -> program . statement
    (3) statement -> . call SEMICOLON
    (4) statement -> . definition SEMICOLON
    (8) call -> . NAME tuple
    (6) definition -> . DEFINE NAME value
    (7) definition -> . DEFINE NAME tuple block

    NAME            shift and go to state 6
    DEFINE          shift and go to state 9

    call                           shift and go to state 5
    statement                      shift and go to state 7
    definition                     shift and go to state 8

state 3

    (5) return -> RETURN . value
    (18) value -> . constant
    (19) value -> . block
    (20) value -> . call
    (21) value -> . tuple
    (23) constant -> . STRING
    (24) constant -> . NUMERAL
    (25) block -> . LBRACE program RBRACE
    (8) call -> . NAME tuple
    (9) tuple -> . LPAREN arguments RPAREN
    (10) tuple -> . LPAREN RPAREN

    STRING          shift and go to state 13
    NUMERAL         shift and go to state 17
    LBRACE          shift and go to state 14
    NAME            shift and go to state 6
    LPAREN          shift and go to state 16

    tuple                          shift and go to state 10
    call                           shift and go to state 18
    value                          shift and go to state 15
    constant                       shift and go to state 11
    block                          shift and go to state 12

state 4

    (2) program -> return SEMICOLON .

    NAME            reduce using rule 2 (program -> return SEMICOLON .)
    DEFINE          reduce using rule 2 (program -> return SEMICOLON .)
    $end            reduce using rule 2 (program -> return SEMICOLON .)
    RBRACE          reduce using rule 2 (program -> return SEMICOLON .)


state 5

    (3) statement -> call . SEMICOLON

    SEMICOLON       shift and go to state 19


state 6

    (8) call -> NAME . tuple
    (9) tuple -> . LPAREN arguments RPAREN
    (10) tuple -> . LPAREN RPAREN

    LPAREN          shift and go to state 16

    tuple                          shift and go to state 20

state 7

    (1) program -> program statement .

    NAME            reduce using rule 1 (program -> program statement .)
    DEFINE          reduce using rule 1 (program -> program statement .)
    $end            reduce using rule 1 (program -> program statement .)
    RBRACE          reduce using rule 1 (program -> program statement .)


state 8

    (4) statement -> definition . SEMICOLON

    SEMICOLON       shift and go to state 21


state 9

    (6) definition -> DEFINE . NAME value
    (7) definition -> DEFINE . NAME tuple block

    NAME            shift and go to state 22


state 10

    (21) value -> tuple .

    RPAREN          reduce using rule 21 (value -> tuple .)
    COMMA           reduce using rule 21 (value -> tuple .)
    SEMICOLON       reduce using rule 21 (value -> tuple .)


state 11

    (18) value -> constant .

    RPAREN          reduce using rule 18 (value -> constant .)
    COMMA           reduce using rule 18 (value -> constant .)
    SEMICOLON       reduce using rule 18 (value -> constant .)


state 12

    (19) value -> block .

    RPAREN          reduce using rule 19 (value -> block .)
    COMMA           reduce using rule 19 (value -> block .)
    SEMICOLON       reduce using rule 19 (value -> block .)


state 13

    (23) constant -> STRING .

    RPAREN          reduce using rule 23 (constant -> STRING .)
    COMMA           reduce using rule 23 (constant -> STRING .)
    SEMICOLON       reduce using rule 23 (constant -> STRING .)


state 14

    (25) block -> LBRACE . program RBRACE
    (1) program -> . program statement
    (2) program -> . return SEMICOLON
    (5) return -> . RETURN value

    RETURN          shift and go to state 3

    program                        shift and go to state 23
    return                         shift and go to state 1

state 15

    (5) return -> RETURN value .

    SEMICOLON       reduce using rule 5 (return -> RETURN value .)


state 16

    (9) tuple -> LPAREN . arguments RPAREN
    (10) tuple -> LPAREN . RPAREN
    (11) arguments -> . arg
    (12) arguments -> . arguments COMMA arg
    (13) arg -> . positional_value
    (14) arg -> . named_value
    (15) arg -> . variable
    (17) positional_value -> . value
    (16) named_value -> . NAME ASSIGN value
    (22) variable -> . NAME
    (18) value -> . constant
    (19) value -> . block
    (20) value -> . call
    (21) value -> . tuple
    (23) constant -> . STRING
    (24) constant -> . NUMERAL
    (25) block -> . LBRACE program RBRACE
    (8) call -> . NAME tuple
    (9) tuple -> . LPAREN arguments RPAREN
    (10) tuple -> . LPAREN RPAREN

    RPAREN          shift and go to state 24
    NAME            shift and go to state 30
    STRING          shift and go to state 13
    NUMERAL         shift and go to state 17
    LBRACE          shift and go to state 14
    LPAREN          shift and go to state 16

    named_value                    shift and go to state 27
    arg                            shift and go to state 28
    constant                       shift and go to state 11
    value                          shift and go to state 25
    call                           shift and go to state 18
    block                          shift and go to state 12
    arguments                      shift and go to state 31
    tuple                          shift and go to state 10
    positional_value               shift and go to state 29
    variable                       shift and go to state 26

state 17

    (24) constant -> NUMERAL .

    RPAREN          reduce using rule 24 (constant -> NUMERAL .)
    COMMA           reduce using rule 24 (constant -> NUMERAL .)
    SEMICOLON       reduce using rule 24 (constant -> NUMERAL .)


state 18

    (20) value -> call .

    RPAREN          reduce using rule 20 (value -> call .)
    COMMA           reduce using rule 20 (value -> call .)
    SEMICOLON       reduce using rule 20 (value -> call .)


state 19

    (3) statement -> call SEMICOLON .

    NAME            reduce using rule 3 (statement -> call SEMICOLON .)
    DEFINE          reduce using rule 3 (statement -> call SEMICOLON .)
    $end            reduce using rule 3 (statement -> call SEMICOLON .)
    RBRACE          reduce using rule 3 (statement -> call SEMICOLON .)


state 20

    (8) call -> NAME tuple .

    SEMICOLON       reduce using rule 8 (call -> NAME tuple .)
    RPAREN          reduce using rule 8 (call -> NAME tuple .)
    COMMA           reduce using rule 8 (call -> NAME tuple .)


state 21

    (4) statement -> definition SEMICOLON .

    NAME            reduce using rule 4 (statement -> definition SEMICOLON .)
    DEFINE          reduce using rule 4 (statement -> definition SEMICOLON .)
    $end            reduce using rule 4 (statement -> definition SEMICOLON .)
    RBRACE          reduce using rule 4 (statement -> definition SEMICOLON .)


state 22

    (6) definition -> DEFINE NAME . value
    (7) definition -> DEFINE NAME . tuple block
    (18) value -> . constant
    (19) value -> . block
    (20) value -> . call
    (21) value -> . tuple
    (9) tuple -> . LPAREN arguments RPAREN
    (10) tuple -> . LPAREN RPAREN
    (23) constant -> . STRING
    (24) constant -> . NUMERAL
    (25) block -> . LBRACE program RBRACE
    (8) call -> . NAME tuple

    LPAREN          shift and go to state 16
    STRING          shift and go to state 13
    NUMERAL         shift and go to state 17
    LBRACE          shift and go to state 14
    NAME            shift and go to state 6

    tuple                          shift and go to state 32
    call                           shift and go to state 18
    value                          shift and go to state 33
    constant                       shift and go to state 11
    block                          shift and go to state 12

state 23

    (25) block -> LBRACE program . RBRACE
    (1) program -> program . statement
    (3) statement -> . call SEMICOLON
    (4) statement -> . definition SEMICOLON
    (8) call -> . NAME tuple
    (6) definition -> . DEFINE NAME value
    (7) definition -> . DEFINE NAME tuple block

    RBRACE          shift and go to state 34
    NAME            shift and go to state 6
    DEFINE          shift and go to state 9

    call                           shift and go to state 5
    statement                      shift and go to state 7
    definition                     shift and go to state 8

state 24

    (10) tuple -> LPAREN RPAREN .

    RPAREN          reduce using rule 10 (tuple -> LPAREN RPAREN .)
    COMMA           reduce using rule 10 (tuple -> LPAREN RPAREN .)
    SEMICOLON       reduce using rule 10 (tuple -> LPAREN RPAREN .)
    LBRACE          reduce using rule 10 (tuple -> LPAREN RPAREN .)


state 25

    (17) positional_value -> value .

    RPAREN          reduce using rule 17 (positional_value -> value .)
    COMMA           reduce using rule 17 (positional_value -> value .)


state 26

    (15) arg -> variable .

    RPAREN          reduce using rule 15 (arg -> variable .)
    COMMA           reduce using rule 15 (arg -> variable .)


state 27

    (14) arg -> named_value .

    RPAREN          reduce using rule 14 (arg -> named_value .)
    COMMA           reduce using rule 14 (arg -> named_value .)


state 28

    (11) arguments -> arg .

    RPAREN          reduce using rule 11 (arguments -> arg .)
    COMMA           reduce using rule 11 (arguments -> arg .)


state 29

    (13) arg -> positional_value .

    RPAREN          reduce using rule 13 (arg -> positional_value .)
    COMMA           reduce using rule 13 (arg -> positional_value .)


state 30

    (16) named_value -> NAME . ASSIGN value
    (22) variable -> NAME .
    (8) call -> NAME . tuple
    (9) tuple -> . LPAREN arguments RPAREN
    (10) tuple -> . LPAREN RPAREN

    ASSIGN          shift and go to state 35
    RPAREN          reduce using rule 22 (variable -> NAME .)
    COMMA           reduce using rule 22 (variable -> NAME .)
    LPAREN          shift and go to state 16

    tuple                          shift and go to state 20

state 31

    (9) tuple -> LPAREN arguments . RPAREN
    (12) arguments -> arguments . COMMA arg

    RPAREN          shift and go to state 36
    COMMA           shift and go to state 37


state 32

    (7) definition -> DEFINE NAME tuple . block
    (21) value -> tuple .
    (25) block -> . LBRACE program RBRACE

    SEMICOLON       reduce using rule 21 (value -> tuple .)
    LBRACE          shift and go to state 14

    block                          shift and go to state 38

state 33

    (6) definition -> DEFINE NAME value .

    SEMICOLON       reduce using rule 6 (definition -> DEFINE NAME value .)


state 34

    (25) block -> LBRACE program RBRACE .

    RPAREN          reduce using rule 25 (block -> LBRACE program RBRACE .)
    COMMA           reduce using rule 25 (block -> LBRACE program RBRACE .)
    SEMICOLON       reduce using rule 25 (block -> LBRACE program RBRACE .)


state 35

    (16) named_value -> NAME ASSIGN . value
    (18) value -> . constant
    (19) value -> . block
    (20) value -> . call
    (21) value -> . tuple
    (23) constant -> . STRING
    (24) constant -> . NUMERAL
    (25) block -> . LBRACE program RBRACE
    (8) call -> . NAME tuple
    (9) tuple -> . LPAREN arguments RPAREN
    (10) tuple -> . LPAREN RPAREN

    STRING          shift and go to state 13
    NUMERAL         shift and go to state 17
    LBRACE          shift and go to state 14
    NAME            shift and go to state 6
    LPAREN          shift and go to state 16

    tuple                          shift and go to state 10
    call                           shift and go to state 18
    value                          shift and go to state 39
    constant                       shift and go to state 11
    block                          shift and go to state 12

state 36

    (9) tuple -> LPAREN arguments RPAREN .

    RPAREN          reduce using rule 9 (tuple -> LPAREN arguments RPAREN .)
    COMMA           reduce using rule 9 (tuple -> LPAREN arguments RPAREN .)
    SEMICOLON       reduce using rule 9 (tuple -> LPAREN arguments RPAREN .)
    LBRACE          reduce using rule 9 (tuple -> LPAREN arguments RPAREN .)


state 37

    (12) arguments -> arguments COMMA . arg
    (13) arg -> . positional_value
    (14) arg -> . named_value
    (15) arg -> . variable
    (17) positional_value -> . value
    (16) named_value -> . NAME ASSIGN value
    (22) variable -> . NAME
    (18) value -> . constant
    (19) value -> . block
    (20) value -> . call
    (21) value -> . tuple
    (23) constant -> . STRING
    (24) constant -> . NUMERAL
    (25) block -> . LBRACE program RBRACE
    (8) call -> . NAME tuple
    (9) tuple -> . LPAREN arguments RPAREN
    (10) tuple -> . LPAREN RPAREN

    NAME            shift and go to state 30
    STRING          shift and go to state 13
    NUMERAL         shift and go to state 17
    LBRACE          shift and go to state 14
    LPAREN          shift and go to state 16

    named_value                    shift and go to state 27
    arg                            shift and go to state 40
    constant                       shift and go to state 11
    value                          shift and go to state 25
    call                           shift and go to state 18
    block                          shift and go to state 12
    tuple                          shift and go to state 10
    positional_value               shift and go to state 29
    variable                       shift and go to state 26

state 38

    (7) definition -> DEFINE NAME tuple block .

    SEMICOLON       reduce using rule 7 (definition -> DEFINE NAME tuple block .)


state 39

    (16) named_value -> NAME ASSIGN value .

    RPAREN          reduce using rule 16 (named_value -> NAME ASSIGN value .)
    COMMA           reduce using rule 16 (named_value -> NAME ASSIGN value .)


state 40

    (12) arguments -> arguments COMMA arg .

    RPAREN          reduce using rule 12 (arguments -> arguments COMMA arg .)
    COMMA           reduce using rule 12 (arguments -> arguments COMMA arg .)

