Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    COLON

Grammar

Rule 0     S' -> program
Rule 1     program -> program statement
Rule 2     program -> statement
Rule 3     statement -> call SEMICOLON
Rule 4     block -> LBRACE program RBRACE
Rule 5     call -> NAME tuple
Rule 6     arguments -> arg
Rule 7     arguments -> arguments COMMA arg
Rule 8     arg -> value
Rule 9     arg -> pair
Rule 10    pair -> variable ASSIGN value
Rule 11    value -> variable
Rule 12    value -> constant
Rule 13    value -> block
Rule 14    value -> call
Rule 15    value -> tuple
Rule 16    tuple -> LPAREN arguments RPAREN
Rule 17    tuple -> LPAREN RPAREN
Rule 18    variable -> NAME
Rule 19    constant -> STRING
Rule 20    constant -> NUMERAL

Terminals, with rules where they appear

ASSIGN               : 10
COLON                : 
COMMA                : 7
LBRACE               : 4
LPAREN               : 16 17
NAME                 : 5 18
NUMERAL              : 20
RBRACE               : 4
RPAREN               : 16 17
SEMICOLON            : 3
STRING               : 19
error                : 

Nonterminals, with rules where they appear

arg                  : 6 7
arguments            : 7 16
block                : 13
call                 : 3 14
constant             : 12
pair                 : 9
program              : 1 4 0
statement            : 1 2
tuple                : 5 15
value                : 8 10
variable             : 10 11

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . program statement
    (2) program -> . statement
    (3) statement -> . call SEMICOLON
    (5) call -> . NAME tuple

    NAME            shift and go to state 4

    call                           shift and go to state 3
    program                        shift and go to state 1
    statement                      shift and go to state 2

state 1

    (0) S' -> program .
    (1) program -> program . statement
    (3) statement -> . call SEMICOLON
    (5) call -> . NAME tuple

    NAME            shift and go to state 4

    call                           shift and go to state 3
    statement                      shift and go to state 5

state 2

    (2) program -> statement .

    RBRACE          reduce using rule 2 (program -> statement .)
    NAME            reduce using rule 2 (program -> statement .)
    $end            reduce using rule 2 (program -> statement .)


state 3

    (3) statement -> call . SEMICOLON

    SEMICOLON       shift and go to state 6


state 4

    (5) call -> NAME . tuple
    (16) tuple -> . LPAREN arguments RPAREN
    (17) tuple -> . LPAREN RPAREN

    LPAREN          shift and go to state 7

    tuple                          shift and go to state 8

state 5

    (1) program -> program statement .

    RBRACE          reduce using rule 1 (program -> program statement .)
    NAME            reduce using rule 1 (program -> program statement .)
    $end            reduce using rule 1 (program -> program statement .)


state 6

    (3) statement -> call SEMICOLON .

    NAME            reduce using rule 3 (statement -> call SEMICOLON .)
    $end            reduce using rule 3 (statement -> call SEMICOLON .)
    RBRACE          reduce using rule 3 (statement -> call SEMICOLON .)


state 7

    (16) tuple -> LPAREN . arguments RPAREN
    (17) tuple -> LPAREN . RPAREN
    (6) arguments -> . arg
    (7) arguments -> . arguments COMMA arg
    (8) arg -> . value
    (9) arg -> . pair
    (11) value -> . variable
    (12) value -> . constant
    (13) value -> . block
    (14) value -> . call
    (15) value -> . tuple
    (10) pair -> . variable ASSIGN value
    (18) variable -> . NAME
    (19) constant -> . STRING
    (20) constant -> . NUMERAL
    (4) block -> . LBRACE program RBRACE
    (5) call -> . NAME tuple
    (16) tuple -> . LPAREN arguments RPAREN
    (17) tuple -> . LPAREN RPAREN

    RPAREN          shift and go to state 19
    NAME            shift and go to state 10
    STRING          shift and go to state 17
    NUMERAL         shift and go to state 22
    LBRACE          shift and go to state 15
    LPAREN          shift and go to state 7

    value                          shift and go to state 9
    call                           shift and go to state 13
    arguments                      shift and go to state 11
    tuple                          shift and go to state 20
    variable                       shift and go to state 12
    constant                       shift and go to state 18
    block                          shift and go to state 21
    arg                            shift and go to state 14
    pair                           shift and go to state 16

state 8

    (5) call -> NAME tuple .

    RPAREN          reduce using rule 5 (call -> NAME tuple .)
    COMMA           reduce using rule 5 (call -> NAME tuple .)
    SEMICOLON       reduce using rule 5 (call -> NAME tuple .)


state 9

    (8) arg -> value .

    RPAREN          reduce using rule 8 (arg -> value .)
    COMMA           reduce using rule 8 (arg -> value .)


state 10

    (18) variable -> NAME .
    (5) call -> NAME . tuple
    (16) tuple -> . LPAREN arguments RPAREN
    (17) tuple -> . LPAREN RPAREN

    ASSIGN          reduce using rule 18 (variable -> NAME .)
    RPAREN          reduce using rule 18 (variable -> NAME .)
    COMMA           reduce using rule 18 (variable -> NAME .)
    LPAREN          shift and go to state 7

    tuple                          shift and go to state 8

state 11

    (16) tuple -> LPAREN arguments . RPAREN
    (7) arguments -> arguments . COMMA arg

    RPAREN          shift and go to state 24
    COMMA           shift and go to state 23


state 12

    (11) value -> variable .
    (10) pair -> variable . ASSIGN value

    RPAREN          reduce using rule 11 (value -> variable .)
    COMMA           reduce using rule 11 (value -> variable .)
    ASSIGN          shift and go to state 25


state 13

    (14) value -> call .

    RPAREN          reduce using rule 14 (value -> call .)
    COMMA           reduce using rule 14 (value -> call .)


state 14

    (6) arguments -> arg .

    RPAREN          reduce using rule 6 (arguments -> arg .)
    COMMA           reduce using rule 6 (arguments -> arg .)


state 15

    (4) block -> LBRACE . program RBRACE
    (1) program -> . program statement
    (2) program -> . statement
    (3) statement -> . call SEMICOLON
    (5) call -> . NAME tuple

    NAME            shift and go to state 4

    call                           shift and go to state 3
    program                        shift and go to state 26
    statement                      shift and go to state 2

state 16

    (9) arg -> pair .

    RPAREN          reduce using rule 9 (arg -> pair .)
    COMMA           reduce using rule 9 (arg -> pair .)


state 17

    (19) constant -> STRING .

    RPAREN          reduce using rule 19 (constant -> STRING .)
    COMMA           reduce using rule 19 (constant -> STRING .)


state 18

    (12) value -> constant .

    RPAREN          reduce using rule 12 (value -> constant .)
    COMMA           reduce using rule 12 (value -> constant .)


state 19

    (17) tuple -> LPAREN RPAREN .

    RPAREN          reduce using rule 17 (tuple -> LPAREN RPAREN .)
    COMMA           reduce using rule 17 (tuple -> LPAREN RPAREN .)
    SEMICOLON       reduce using rule 17 (tuple -> LPAREN RPAREN .)


state 20

    (15) value -> tuple .

    RPAREN          reduce using rule 15 (value -> tuple .)
    COMMA           reduce using rule 15 (value -> tuple .)


state 21

    (13) value -> block .

    RPAREN          reduce using rule 13 (value -> block .)
    COMMA           reduce using rule 13 (value -> block .)


state 22

    (20) constant -> NUMERAL .

    RPAREN          reduce using rule 20 (constant -> NUMERAL .)
    COMMA           reduce using rule 20 (constant -> NUMERAL .)


state 23

    (7) arguments -> arguments COMMA . arg
    (8) arg -> . value
    (9) arg -> . pair
    (11) value -> . variable
    (12) value -> . constant
    (13) value -> . block
    (14) value -> . call
    (15) value -> . tuple
    (10) pair -> . variable ASSIGN value
    (18) variable -> . NAME
    (19) constant -> . STRING
    (20) constant -> . NUMERAL
    (4) block -> . LBRACE program RBRACE
    (5) call -> . NAME tuple
    (16) tuple -> . LPAREN arguments RPAREN
    (17) tuple -> . LPAREN RPAREN

    NAME            shift and go to state 10
    STRING          shift and go to state 17
    NUMERAL         shift and go to state 22
    LBRACE          shift and go to state 15
    LPAREN          shift and go to state 7

    value                          shift and go to state 9
    call                           shift and go to state 13
    tuple                          shift and go to state 20
    variable                       shift and go to state 12
    constant                       shift and go to state 18
    block                          shift and go to state 21
    arg                            shift and go to state 27
    pair                           shift and go to state 16

state 24

    (16) tuple -> LPAREN arguments RPAREN .

    RPAREN          reduce using rule 16 (tuple -> LPAREN arguments RPAREN .)
    COMMA           reduce using rule 16 (tuple -> LPAREN arguments RPAREN .)
    SEMICOLON       reduce using rule 16 (tuple -> LPAREN arguments RPAREN .)


state 25

    (10) pair -> variable ASSIGN . value
    (11) value -> . variable
    (12) value -> . constant
    (13) value -> . block
    (14) value -> . call
    (15) value -> . tuple
    (18) variable -> . NAME
    (19) constant -> . STRING
    (20) constant -> . NUMERAL
    (4) block -> . LBRACE program RBRACE
    (5) call -> . NAME tuple
    (16) tuple -> . LPAREN arguments RPAREN
    (17) tuple -> . LPAREN RPAREN

    NAME            shift and go to state 10
    STRING          shift and go to state 17
    NUMERAL         shift and go to state 22
    LBRACE          shift and go to state 15
    LPAREN          shift and go to state 7

    value                          shift and go to state 28
    call                           shift and go to state 13
    tuple                          shift and go to state 20
    variable                       shift and go to state 29
    constant                       shift and go to state 18
    block                          shift and go to state 21

state 26

    (4) block -> LBRACE program . RBRACE
    (1) program -> program . statement
    (3) statement -> . call SEMICOLON
    (5) call -> . NAME tuple

    RBRACE          shift and go to state 30
    NAME            shift and go to state 4

    call                           shift and go to state 3
    statement                      shift and go to state 5

state 27

    (7) arguments -> arguments COMMA arg .

    RPAREN          reduce using rule 7 (arguments -> arguments COMMA arg .)
    COMMA           reduce using rule 7 (arguments -> arguments COMMA arg .)


state 28

    (10) pair -> variable ASSIGN value .

    RPAREN          reduce using rule 10 (pair -> variable ASSIGN value .)
    COMMA           reduce using rule 10 (pair -> variable ASSIGN value .)


state 29

    (11) value -> variable .

    RPAREN          reduce using rule 11 (value -> variable .)
    COMMA           reduce using rule 11 (value -> variable .)


state 30

    (4) block -> LBRACE program RBRACE .

    RPAREN          reduce using rule 4 (block -> LBRACE program RBRACE .)
    COMMA           reduce using rule 4 (block -> LBRACE program RBRACE .)

