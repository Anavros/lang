
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'LPAREN RPAREN LBRACE RBRACE ASSIGN SEMICOLON COMMA COLON NUMERAL STRING NAME\n    program : program statement\n    \n    program : statement\n    \n    statement : call SEMICOLON\n    \n    call : NAME tuple\n    \n    tuple : LPAREN arguments RPAREN\n    \n    tuple : LPAREN RPAREN\n    \n    arguments : arg\n    \n    arguments : arguments COMMA arg\n    \n    arg : positional_value\n        | named_value\n        | variable\n    \n    named_value : NAME ASSIGN value\n    \n    positional_value : value\n    \n    value : constant\n          | block\n          | call\n          | tuple\n    \n    variable : NAME\n    \n    constant : STRING\n             | NUMERAL\n    \n    block : LBRACE program RBRACE\n    '
    
_lr_action_items = {'RBRACE':([4,5,6,25,],[-2,-1,-3,29,]),'ASSIGN':([20,],[24,]),'COMMA':([7,9,10,11,12,13,14,15,16,17,18,19,20,21,23,27,28,29,30,],[-4,-6,-11,-10,-20,-15,-7,-13,-14,-19,-17,-16,-18,-9,26,-5,-12,-21,-8,]),'LBRACE':([8,24,26,],[22,22,22,]),'$end':([1,4,5,6,],[0,-2,-1,-3,]),'NAME':([0,1,4,5,6,8,22,24,25,26,],[3,3,-2,-1,-3,20,3,3,3,20,]),'SEMICOLON':([2,7,9,27,],[6,-4,-6,-5,]),'NUMERAL':([8,24,26,],[12,12,12,]),'STRING':([8,24,26,],[17,17,17,]),'LPAREN':([3,8,20,24,26,],[8,8,8,8,8,]),'RPAREN':([7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,23,27,28,29,30,],[-4,9,-6,-11,-10,-20,-15,-7,-13,-14,-19,-17,-16,-18,-9,27,-5,-12,-21,-8,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'value':([8,24,26,],[15,28,15,]),'block':([8,24,26,],[13,13,13,]),'variable':([8,26,],[10,10,]),'named_value':([8,26,],[11,11,]),'arg':([8,26,],[14,30,]),'program':([0,22,],[1,25,]),'constant':([8,24,26,],[16,16,16,]),'tuple':([3,8,20,24,26,],[7,18,7,18,18,]),'call':([0,1,8,22,24,25,26,],[2,2,19,2,19,2,19,]),'positional_value':([8,26,],[21,21,]),'statement':([0,1,22,25,],[4,5,4,5,]),'arguments':([8,],[23,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> program statement','program',2,'p_program','yacker.py',10),
  ('program -> statement','program',1,'p_program_end','yacker.py',18),
  ('statement -> call SEMICOLON','statement',2,'p_statement','yacker.py',25),
  ('call -> NAME tuple','call',2,'p_call','yacker.py',32),
  ('tuple -> LPAREN arguments RPAREN','tuple',3,'p_tuple','yacker.py',39),
  ('tuple -> LPAREN RPAREN','tuple',2,'p_tuple_empty','yacker.py',50),
  ('arguments -> arg','arguments',1,'p_arguments_single','yacker.py',57),
  ('arguments -> arguments COMMA arg','arguments',3,'p_arguments_list','yacker.py',64),
  ('arg -> positional_value','arg',1,'p_arg','yacker.py',72),
  ('arg -> named_value','arg',1,'p_arg','yacker.py',73),
  ('arg -> variable','arg',1,'p_arg','yacker.py',74),
  ('named_value -> NAME ASSIGN value','named_value',3,'p_named_value','yacker.py',80),
  ('positional_value -> value','positional_value',1,'p_positional_value','yacker.py',87),
  ('value -> constant','value',1,'p_value','yacker.py',93),
  ('value -> block','value',1,'p_value','yacker.py',94),
  ('value -> call','value',1,'p_value','yacker.py',95),
  ('value -> tuple','value',1,'p_value','yacker.py',96),
  ('variable -> NAME','variable',1,'p_variable','yacker.py',102),
  ('constant -> STRING','constant',1,'p_constant','yacker.py',109),
  ('constant -> NUMERAL','constant',1,'p_constant','yacker.py',110),
  ('block -> LBRACE program RBRACE','block',3,'p_block','yacker.py',117),
]
