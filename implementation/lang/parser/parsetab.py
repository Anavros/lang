
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'LPAREN RPAREN LBRACE RBRACE ASSIGN SEMICOLON COMMA COLON NUMERAL STRING NAME RETURN\n    program : program statement\n    \n    program : statement\n    \n    statement : call SEMICOLON\n    \n    return : RETURN value SEMICOLON\n    \n    call : NAME tuple\n    \n    tuple : LPAREN arguments RPAREN\n    \n    tuple : LPAREN RPAREN\n    \n    arguments : arg\n    \n    arguments : arguments COMMA arg\n    \n    arg : positional_value\n        | named_value\n        | variable\n    \n    named_value : NAME ASSIGN value\n    \n    positional_value : value\n    \n    value : constant\n          | block\n          | call\n          | tuple\n    \n    variable : NAME\n    \n    constant : STRING\n             | NUMERAL\n    \n    block : LBRACE program RBRACE\n    '
    
_lr_action_items = {'RPAREN':([7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,24,28,29,30,],[17,-5,-10,-16,-20,-17,24,-11,-12,-19,-7,-21,-18,-15,-14,-8,-6,-9,-13,-22,]),'LPAREN':([4,7,16,25,26,],[7,7,7,7,7,]),'RBRACE':([3,5,6,27,],[-2,-3,-1,30,]),'NUMERAL':([7,25,26,],[18,18,18,]),'COMMA':([8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,24,28,29,30,],[-5,-10,-16,-20,-17,25,-11,-12,-19,-7,-21,-18,-15,-14,-8,-6,-9,-13,-22,]),'SEMICOLON':([1,8,17,24,],[5,-5,-7,-6,]),'LBRACE':([7,25,26,],[23,23,23,]),'$end':([2,3,5,6,],[0,-2,-3,-1,]),'STRING':([7,25,26,],[11,11,11,]),'ASSIGN':([16,],[26,]),'NAME':([0,2,3,5,6,7,23,25,26,27,],[4,4,-2,-3,-1,16,4,16,4,4,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'positional_value':([7,25,],[9,9,]),'block':([7,25,26,],[10,10,10,]),'call':([0,2,7,23,25,26,27,],[1,1,12,1,12,12,1,]),'named_value':([7,25,],[14,14,]),'value':([7,25,26,],[21,21,29,]),'program':([0,23,],[2,27,]),'arguments':([7,],[13,]),'tuple':([4,7,16,25,26,],[8,19,8,19,19,]),'constant':([7,25,26,],[20,20,20,]),'variable':([7,25,],[15,15,]),'arg':([7,25,],[22,28,]),'statement':([0,2,23,27,],[3,6,3,6,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> program statement','program',2,'p_program','yacker.py',10),
  ('program -> statement','program',1,'p_program_end','yacker.py',18),
  ('statement -> call SEMICOLON','statement',2,'p_statement','yacker.py',25),
  ('return -> RETURN value SEMICOLON','return',3,'p_return','yacker.py',32),
  ('call -> NAME tuple','call',2,'p_call','yacker.py',39),
  ('tuple -> LPAREN arguments RPAREN','tuple',3,'p_tuple','yacker.py',46),
  ('tuple -> LPAREN RPAREN','tuple',2,'p_tuple_empty','yacker.py',57),
  ('arguments -> arg','arguments',1,'p_arguments_single','yacker.py',64),
  ('arguments -> arguments COMMA arg','arguments',3,'p_arguments_list','yacker.py',71),
  ('arg -> positional_value','arg',1,'p_arg','yacker.py',79),
  ('arg -> named_value','arg',1,'p_arg','yacker.py',80),
  ('arg -> variable','arg',1,'p_arg','yacker.py',81),
  ('named_value -> NAME ASSIGN value','named_value',3,'p_named_value','yacker.py',87),
  ('positional_value -> value','positional_value',1,'p_positional_value','yacker.py',94),
  ('value -> constant','value',1,'p_value','yacker.py',100),
  ('value -> block','value',1,'p_value','yacker.py',101),
  ('value -> call','value',1,'p_value','yacker.py',102),
  ('value -> tuple','value',1,'p_value','yacker.py',103),
  ('variable -> NAME','variable',1,'p_variable','yacker.py',109),
  ('constant -> STRING','constant',1,'p_constant','yacker.py',116),
  ('constant -> NUMERAL','constant',1,'p_constant','yacker.py',117),
  ('block -> LBRACE program RBRACE','block',3,'p_block','yacker.py',124),
]
