Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    COLON
    ASSIGN

Grammar

Rule 0     S' -> program
Rule 1     program -> program statement
Rule 2     program -> statement
Rule 3     statement -> call SEMICOLON
Rule 4     call -> NAME LPAREN arguments RPAREN
Rule 5     arguments -> value
Rule 6     arguments -> arguments COMMA value
Rule 7     value -> variable
Rule 8     value -> constant
Rule 9     variable -> NAME
Rule 10    constant -> STRING
Rule 11    constant -> NUMERAL

Terminals, with rules where they appear

ASSIGN               : 
COLON                : 
COMMA                : 6
LPAREN               : 4
NAME                 : 4 9
NUMERAL              : 11
RPAREN               : 4
SEMICOLON            : 3
STRING               : 10
error                : 

Nonterminals, with rules where they appear

arguments            : 4 6
call                 : 3
constant             : 8
program              : 1 0
statement            : 1 2
value                : 5 6
variable             : 7

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . program statement
    (2) program -> . statement
    (3) statement -> . call SEMICOLON
    (4) call -> . NAME LPAREN arguments RPAREN

    NAME            shift and go to state 3

    program                        shift and go to state 1
    statement                      shift and go to state 2
    call                           shift and go to state 4

state 1

    (0) S' -> program .
    (1) program -> program . statement
    (3) statement -> . call SEMICOLON
    (4) call -> . NAME LPAREN arguments RPAREN

    NAME            shift and go to state 3

    statement                      shift and go to state 5
    call                           shift and go to state 4

state 2

    (2) program -> statement .

    NAME            reduce using rule 2 (program -> statement .)
    $end            reduce using rule 2 (program -> statement .)


state 3

    (4) call -> NAME . LPAREN arguments RPAREN

    LPAREN          shift and go to state 6


state 4

    (3) statement -> call . SEMICOLON

    SEMICOLON       shift and go to state 7


state 5

    (1) program -> program statement .

    NAME            reduce using rule 1 (program -> program statement .)
    $end            reduce using rule 1 (program -> program statement .)


state 6

    (4) call -> NAME LPAREN . arguments RPAREN
    (5) arguments -> . value
    (6) arguments -> . arguments COMMA value
    (7) value -> . variable
    (8) value -> . constant
    (9) variable -> . NAME
    (10) constant -> . STRING
    (11) constant -> . NUMERAL

    NAME            shift and go to state 9
    STRING          shift and go to state 13
    NUMERAL         shift and go to state 14

    constant                       shift and go to state 12
    variable                       shift and go to state 11
    arguments                      shift and go to state 8
    value                          shift and go to state 10

state 7

    (3) statement -> call SEMICOLON .

    NAME            reduce using rule 3 (statement -> call SEMICOLON .)
    $end            reduce using rule 3 (statement -> call SEMICOLON .)


state 8

    (4) call -> NAME LPAREN arguments . RPAREN
    (6) arguments -> arguments . COMMA value

    RPAREN          shift and go to state 15
    COMMA           shift and go to state 16


state 9

    (9) variable -> NAME .

    RPAREN          reduce using rule 9 (variable -> NAME .)
    COMMA           reduce using rule 9 (variable -> NAME .)


state 10

    (5) arguments -> value .

    RPAREN          reduce using rule 5 (arguments -> value .)
    COMMA           reduce using rule 5 (arguments -> value .)


state 11

    (7) value -> variable .

    RPAREN          reduce using rule 7 (value -> variable .)
    COMMA           reduce using rule 7 (value -> variable .)


state 12

    (8) value -> constant .

    RPAREN          reduce using rule 8 (value -> constant .)
    COMMA           reduce using rule 8 (value -> constant .)


state 13

    (10) constant -> STRING .

    RPAREN          reduce using rule 10 (constant -> STRING .)
    COMMA           reduce using rule 10 (constant -> STRING .)


state 14

    (11) constant -> NUMERAL .

    RPAREN          reduce using rule 11 (constant -> NUMERAL .)
    COMMA           reduce using rule 11 (constant -> NUMERAL .)


state 15

    (4) call -> NAME LPAREN arguments RPAREN .

    SEMICOLON       reduce using rule 4 (call -> NAME LPAREN arguments RPAREN .)


state 16

    (6) arguments -> arguments COMMA . value
    (7) value -> . variable
    (8) value -> . constant
    (9) variable -> . NAME
    (10) constant -> . STRING
    (11) constant -> . NUMERAL

    NAME            shift and go to state 9
    STRING          shift and go to state 13
    NUMERAL         shift and go to state 14

    constant                       shift and go to state 12
    variable                       shift and go to state 11
    value                          shift and go to state 17

state 17

    (6) arguments -> arguments COMMA value .

    RPAREN          reduce using rule 6 (arguments -> arguments COMMA value .)
    COMMA           reduce using rule 6 (arguments -> arguments COMMA value .)

